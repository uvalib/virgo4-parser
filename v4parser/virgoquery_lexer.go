// Code generated from VirgoQueryLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package v4parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type VirgoQueryLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var VirgoQueryLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func virgoquerylexerLexerInit() {
	staticData := &VirgoQueryLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE", "SEARCH", "DATE_MODE", "IN_QUOTE",
	}
	staticData.LiteralNames = []string{
		"", "", "", "", "", "'title'", "'journal_title'", "'author'", "'subject'",
		"'keyword'", "'fulltext'", "'series'", "'published'", "'identifier'",
		"'filter'", "'date'", "", "", "", "", "'['", "']'",
	}
	staticData.SymbolicNames = []string{
		"", "LPAREN", "RPAREN", "BOOLEAN", "COLON", "TITLE", "JOURNAL_TITLE",
		"AUTHOR", "SUBJECT", "KEYWORD", "FULLTEXT", "SERIES", "PUBLISHED", "IDENTIFIER",
		"FILTER", "DATE", "LBRACE", "WS1", "ERROR_CHARACTER", "QUOTE", "LBRACKET",
		"RBRACKET", "RBRACE", "SEARCH_WORD", "WS2", "TO", "AFTER", "BEFORE",
		"DATE_STRING", "WS3", "QUOTE_STR",
	}
	staticData.RuleNames = []string{
		"WS", "LPAREN", "RPAREN", "BOOLEAN", "COLON", "TITLE", "JOURNAL_TITLE",
		"AUTHOR", "SUBJECT", "KEYWORD", "FULLTEXT", "SERIES", "PUBLISHED", "IDENTIFIER",
		"FILTER", "DATE", "LBRACE", "WS1", "ERROR_CHARACTER", "QUOTE", "LPAREN2",
		"RPAREN2", "LBRACKET", "RBRACKET", "LBRACE1", "RBRACE", "BOOLEAN1",
		"SEARCH_WORD", "WS2", "ERROR_CHARACTER2", "COLON2", "TO", "AFTER", "BEFORE",
		"DATE_STRING", "LBRACE2", "RBRACE1", "WS3", "ERROR_CHARACTER3", "QUOTE_STR",
		"QUOTE2", "ERROR_CHARACTER4",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 30, 326, 6, -1, 6, -1, 6, -1, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2,
		7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8,
		7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13,
		2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2,
		19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24,
		7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7,
		29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34,
		2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2,
		40, 7, 40, 2, 41, 7, 41, 1, 0, 4, 0, 90, 8, 0, 11, 0, 12, 0, 91, 1, 1,
		1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3,
		106, 8, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10,
		1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12,
		1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14,
		1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1,
		16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1,
		22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25,
		1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 247,
		8, 26, 1, 26, 1, 26, 1, 27, 4, 27, 252, 8, 27, 11, 27, 12, 27, 253, 1,
		28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30,
		1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 272, 8, 31, 1, 32, 1, 32, 1,
		32, 1, 32, 1, 32, 1, 32, 3, 32, 280, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33,
		1, 33, 1, 33, 1, 33, 3, 33, 289, 8, 33, 1, 34, 4, 34, 292, 8, 34, 11, 34,
		12, 34, 293, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1,
		36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 4, 39,
		314, 8, 39, 11, 39, 12, 39, 315, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1,
		41, 1, 41, 1, 41, 1, 41, 0, 0, 42, 4, 0, 6, 1, 8, 2, 10, 3, 12, 4, 14,
		5, 16, 6, 18, 7, 20, 8, 22, 9, 24, 10, 26, 11, 28, 12, 30, 13, 32, 14,
		34, 15, 36, 16, 38, 17, 40, 18, 42, 19, 44, 0, 46, 0, 48, 20, 50, 21, 52,
		0, 54, 22, 56, 0, 58, 23, 60, 24, 62, 0, 64, 0, 66, 25, 68, 26, 70, 27,
		72, 28, 74, 0, 76, 0, 78, 29, 80, 0, 82, 30, 84, 0, 86, 0, 4, 0, 1, 2,
		3, 4, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 34, 34, 8220, 8221, 8, 0, 9, 10,
		13, 13, 32, 32, 34, 34, 40, 41, 123, 123, 125, 125, 8220, 8221, 2, 0, 45,
		45, 47, 57, 332, 0, 6, 1, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 10, 1, 0, 0, 0,
		0, 12, 1, 0, 0, 0, 0, 14, 1, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 18, 1, 0, 0,
		0, 0, 20, 1, 0, 0, 0, 0, 22, 1, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 26, 1, 0,
		0, 0, 0, 28, 1, 0, 0, 0, 0, 30, 1, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 34, 1,
		0, 0, 0, 0, 36, 1, 0, 0, 0, 0, 38, 1, 0, 0, 0, 0, 40, 1, 0, 0, 0, 1, 42,
		1, 0, 0, 0, 1, 44, 1, 0, 0, 0, 1, 46, 1, 0, 0, 0, 1, 48, 1, 0, 0, 0, 1,
		50, 1, 0, 0, 0, 1, 52, 1, 0, 0, 0, 1, 54, 1, 0, 0, 0, 1, 56, 1, 0, 0, 0,
		1, 58, 1, 0, 0, 0, 1, 60, 1, 0, 0, 0, 1, 62, 1, 0, 0, 0, 2, 64, 1, 0, 0,
		0, 2, 66, 1, 0, 0, 0, 2, 68, 1, 0, 0, 0, 2, 70, 1, 0, 0, 0, 2, 72, 1, 0,
		0, 0, 2, 74, 1, 0, 0, 0, 2, 76, 1, 0, 0, 0, 2, 78, 1, 0, 0, 0, 2, 80, 1,
		0, 0, 0, 3, 82, 1, 0, 0, 0, 3, 84, 1, 0, 0, 0, 3, 86, 1, 0, 0, 0, 4, 89,
		1, 0, 0, 0, 6, 93, 1, 0, 0, 0, 8, 95, 1, 0, 0, 0, 10, 105, 1, 0, 0, 0,
		12, 107, 1, 0, 0, 0, 14, 109, 1, 0, 0, 0, 16, 115, 1, 0, 0, 0, 18, 129,
		1, 0, 0, 0, 20, 136, 1, 0, 0, 0, 22, 144, 1, 0, 0, 0, 24, 152, 1, 0, 0,
		0, 26, 161, 1, 0, 0, 0, 28, 168, 1, 0, 0, 0, 30, 178, 1, 0, 0, 0, 32, 189,
		1, 0, 0, 0, 34, 196, 1, 0, 0, 0, 36, 203, 1, 0, 0, 0, 38, 207, 1, 0, 0,
		0, 40, 211, 1, 0, 0, 0, 42, 213, 1, 0, 0, 0, 44, 217, 1, 0, 0, 0, 46, 221,
		1, 0, 0, 0, 48, 225, 1, 0, 0, 0, 50, 227, 1, 0, 0, 0, 52, 229, 1, 0, 0,
		0, 54, 234, 1, 0, 0, 0, 56, 246, 1, 0, 0, 0, 58, 251, 1, 0, 0, 0, 60, 255,
		1, 0, 0, 0, 62, 259, 1, 0, 0, 0, 64, 263, 1, 0, 0, 0, 66, 271, 1, 0, 0,
		0, 68, 279, 1, 0, 0, 0, 70, 288, 1, 0, 0, 0, 72, 291, 1, 0, 0, 0, 74, 295,
		1, 0, 0, 0, 76, 299, 1, 0, 0, 0, 78, 304, 1, 0, 0, 0, 80, 308, 1, 0, 0,
		0, 82, 313, 1, 0, 0, 0, 84, 317, 1, 0, 0, 0, 86, 322, 1, 0, 0, 0, 88, 90,
		7, 0, 0, 0, 89, 88, 1, 0, 0, 0, 90, 91, 1, 0, 0, 0, 91, 89, 1, 0, 0, 0,
		91, 92, 1, 0, 0, 0, 92, 5, 1, 0, 0, 0, 93, 94, 5, 40, 0, 0, 94, 7, 1, 0,
		0, 0, 95, 96, 5, 41, 0, 0, 96, 9, 1, 0, 0, 0, 97, 98, 5, 65, 0, 0, 98,
		99, 5, 78, 0, 0, 99, 106, 5, 68, 0, 0, 100, 101, 5, 79, 0, 0, 101, 106,
		5, 82, 0, 0, 102, 103, 5, 78, 0, 0, 103, 104, 5, 79, 0, 0, 104, 106, 5,
		84, 0, 0, 105, 97, 1, 0, 0, 0, 105, 100, 1, 0, 0, 0, 105, 102, 1, 0, 0,
		0, 106, 11, 1, 0, 0, 0, 107, 108, 5, 58, 0, 0, 108, 13, 1, 0, 0, 0, 109,
		110, 5, 116, 0, 0, 110, 111, 5, 105, 0, 0, 111, 112, 5, 116, 0, 0, 112,
		113, 5, 108, 0, 0, 113, 114, 5, 101, 0, 0, 114, 15, 1, 0, 0, 0, 115, 116,
		5, 106, 0, 0, 116, 117, 5, 111, 0, 0, 117, 118, 5, 117, 0, 0, 118, 119,
		5, 114, 0, 0, 119, 120, 5, 110, 0, 0, 120, 121, 5, 97, 0, 0, 121, 122,
		5, 108, 0, 0, 122, 123, 5, 95, 0, 0, 123, 124, 5, 116, 0, 0, 124, 125,
		5, 105, 0, 0, 125, 126, 5, 116, 0, 0, 126, 127, 5, 108, 0, 0, 127, 128,
		5, 101, 0, 0, 128, 17, 1, 0, 0, 0, 129, 130, 5, 97, 0, 0, 130, 131, 5,
		117, 0, 0, 131, 132, 5, 116, 0, 0, 132, 133, 5, 104, 0, 0, 133, 134, 5,
		111, 0, 0, 134, 135, 5, 114, 0, 0, 135, 19, 1, 0, 0, 0, 136, 137, 5, 115,
		0, 0, 137, 138, 5, 117, 0, 0, 138, 139, 5, 98, 0, 0, 139, 140, 5, 106,
		0, 0, 140, 141, 5, 101, 0, 0, 141, 142, 5, 99, 0, 0, 142, 143, 5, 116,
		0, 0, 143, 21, 1, 0, 0, 0, 144, 145, 5, 107, 0, 0, 145, 146, 5, 101, 0,
		0, 146, 147, 5, 121, 0, 0, 147, 148, 5, 119, 0, 0, 148, 149, 5, 111, 0,
		0, 149, 150, 5, 114, 0, 0, 150, 151, 5, 100, 0, 0, 151, 23, 1, 0, 0, 0,
		152, 153, 5, 102, 0, 0, 153, 154, 5, 117, 0, 0, 154, 155, 5, 108, 0, 0,
		155, 156, 5, 108, 0, 0, 156, 157, 5, 116, 0, 0, 157, 158, 5, 101, 0, 0,
		158, 159, 5, 120, 0, 0, 159, 160, 5, 116, 0, 0, 160, 25, 1, 0, 0, 0, 161,
		162, 5, 115, 0, 0, 162, 163, 5, 101, 0, 0, 163, 164, 5, 114, 0, 0, 164,
		165, 5, 105, 0, 0, 165, 166, 5, 101, 0, 0, 166, 167, 5, 115, 0, 0, 167,
		27, 1, 0, 0, 0, 168, 169, 5, 112, 0, 0, 169, 170, 5, 117, 0, 0, 170, 171,
		5, 98, 0, 0, 171, 172, 5, 108, 0, 0, 172, 173, 5, 105, 0, 0, 173, 174,
		5, 115, 0, 0, 174, 175, 5, 104, 0, 0, 175, 176, 5, 101, 0, 0, 176, 177,
		5, 100, 0, 0, 177, 29, 1, 0, 0, 0, 178, 179, 5, 105, 0, 0, 179, 180, 5,
		100, 0, 0, 180, 181, 5, 101, 0, 0, 181, 182, 5, 110, 0, 0, 182, 183, 5,
		116, 0, 0, 183, 184, 5, 105, 0, 0, 184, 185, 5, 102, 0, 0, 185, 186, 5,
		105, 0, 0, 186, 187, 5, 101, 0, 0, 187, 188, 5, 114, 0, 0, 188, 31, 1,
		0, 0, 0, 189, 190, 5, 102, 0, 0, 190, 191, 5, 105, 0, 0, 191, 192, 5, 108,
		0, 0, 192, 193, 5, 116, 0, 0, 193, 194, 5, 101, 0, 0, 194, 195, 5, 114,
		0, 0, 195, 33, 1, 0, 0, 0, 196, 197, 5, 100, 0, 0, 197, 198, 5, 97, 0,
		0, 198, 199, 5, 116, 0, 0, 199, 200, 5, 101, 0, 0, 200, 201, 1, 0, 0, 0,
		201, 202, 6, 15, 0, 0, 202, 35, 1, 0, 0, 0, 203, 204, 5, 123, 0, 0, 204,
		205, 1, 0, 0, 0, 205, 206, 6, 16, 1, 0, 206, 37, 1, 0, 0, 0, 207, 208,
		3, 4, 0, 0, 208, 209, 1, 0, 0, 0, 209, 210, 6, 17, 2, 0, 210, 39, 1, 0,
		0, 0, 211, 212, 9, 0, 0, 0, 212, 41, 1, 0, 0, 0, 213, 214, 7, 1, 0, 0,
		214, 215, 1, 0, 0, 0, 215, 216, 6, 19, 3, 0, 216, 43, 1, 0, 0, 0, 217,
		218, 5, 40, 0, 0, 218, 219, 1, 0, 0, 0, 219, 220, 6, 20, 4, 0, 220, 45,
		1, 0, 0, 0, 221, 222, 5, 41, 0, 0, 222, 223, 1, 0, 0, 0, 223, 224, 6, 21,
		5, 0, 224, 47, 1, 0, 0, 0, 225, 226, 5, 91, 0, 0, 226, 49, 1, 0, 0, 0,
		227, 228, 5, 93, 0, 0, 228, 51, 1, 0, 0, 0, 229, 230, 5, 123, 0, 0, 230,
		231, 1, 0, 0, 0, 231, 232, 6, 24, 1, 0, 232, 233, 6, 24, 6, 0, 233, 53,
		1, 0, 0, 0, 234, 235, 5, 125, 0, 0, 235, 236, 1, 0, 0, 0, 236, 237, 6,
		25, 7, 0, 237, 55, 1, 0, 0, 0, 238, 239, 5, 65, 0, 0, 239, 240, 5, 78,
		0, 0, 240, 247, 5, 68, 0, 0, 241, 242, 5, 79, 0, 0, 242, 247, 5, 82, 0,
		0, 243, 244, 5, 78, 0, 0, 244, 245, 5, 79, 0, 0, 245, 247, 5, 84, 0, 0,
		246, 238, 1, 0, 0, 0, 246, 241, 1, 0, 0, 0, 246, 243, 1, 0, 0, 0, 247,
		248, 1, 0, 0, 0, 248, 249, 6, 26, 8, 0, 249, 57, 1, 0, 0, 0, 250, 252,
		8, 2, 0, 0, 251, 250, 1, 0, 0, 0, 252, 253, 1, 0, 0, 0, 253, 251, 1, 0,
		0, 0, 253, 254, 1, 0, 0, 0, 254, 59, 1, 0, 0, 0, 255, 256, 3, 4, 0, 0,
		256, 257, 1, 0, 0, 0, 257, 258, 6, 28, 2, 0, 258, 61, 1, 0, 0, 0, 259,
		260, 9, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 262, 6, 29, 9, 0, 262, 63,
		1, 0, 0, 0, 263, 264, 5, 58, 0, 0, 264, 265, 1, 0, 0, 0, 265, 266, 6, 30,
		10, 0, 266, 65, 1, 0, 0, 0, 267, 268, 5, 84, 0, 0, 268, 272, 5, 79, 0,
		0, 269, 270, 5, 45, 0, 0, 270, 272, 5, 45, 0, 0, 271, 267, 1, 0, 0, 0,
		271, 269, 1, 0, 0, 0, 272, 67, 1, 0, 0, 0, 273, 274, 5, 65, 0, 0, 274,
		275, 5, 70, 0, 0, 275, 276, 5, 84, 0, 0, 276, 277, 5, 69, 0, 0, 277, 280,
		5, 82, 0, 0, 278, 280, 5, 62, 0, 0, 279, 273, 1, 0, 0, 0, 279, 278, 1,
		0, 0, 0, 280, 69, 1, 0, 0, 0, 281, 282, 5, 66, 0, 0, 282, 283, 5, 69, 0,
		0, 283, 284, 5, 70, 0, 0, 284, 285, 5, 79, 0, 0, 285, 286, 5, 82, 0, 0,
		286, 289, 5, 69, 0, 0, 287, 289, 5, 60, 0, 0, 288, 281, 1, 0, 0, 0, 288,
		287, 1, 0, 0, 0, 289, 71, 1, 0, 0, 0, 290, 292, 7, 3, 0, 0, 291, 290, 1,
		0, 0, 0, 292, 293, 1, 0, 0, 0, 293, 291, 1, 0, 0, 0, 293, 294, 1, 0, 0,
		0, 294, 73, 1, 0, 0, 0, 295, 296, 5, 123, 0, 0, 296, 297, 1, 0, 0, 0, 297,
		298, 6, 35, 6, 0, 298, 75, 1, 0, 0, 0, 299, 300, 5, 125, 0, 0, 300, 301,
		1, 0, 0, 0, 301, 302, 6, 36, 7, 0, 302, 303, 6, 36, 11, 0, 303, 77, 1,
		0, 0, 0, 304, 305, 3, 4, 0, 0, 305, 306, 1, 0, 0, 0, 306, 307, 6, 37, 2,
		0, 307, 79, 1, 0, 0, 0, 308, 309, 9, 0, 0, 0, 309, 310, 1, 0, 0, 0, 310,
		311, 6, 38, 9, 0, 311, 81, 1, 0, 0, 0, 312, 314, 8, 1, 0, 0, 313, 312,
		1, 0, 0, 0, 314, 315, 1, 0, 0, 0, 315, 313, 1, 0, 0, 0, 315, 316, 1, 0,
		0, 0, 316, 83, 1, 0, 0, 0, 317, 318, 7, 1, 0, 0, 318, 319, 1, 0, 0, 0,
		319, 320, 6, 40, 7, 0, 320, 321, 6, 40, 12, 0, 321, 85, 1, 0, 0, 0, 322,
		323, 9, 0, 0, 0, 323, 324, 1, 0, 0, 0, 324, 325, 6, 41, 9, 0, 325, 87,
		1, 0, 0, 0, 13, 0, 1, 2, 3, 91, 105, 246, 253, 271, 279, 288, 293, 315,
		13, 5, 2, 0, 5, 1, 0, 6, 0, 0, 5, 3, 0, 7, 1, 0, 7, 2, 0, 7, 16, 0, 4,
		0, 0, 7, 3, 0, 7, 18, 0, 7, 4, 0, 7, 22, 0, 7, 19, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// VirgoQueryLexerInit initializes any static state used to implement VirgoQueryLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewVirgoQueryLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func VirgoQueryLexerInit() {
	staticData := &VirgoQueryLexerLexerStaticData
	staticData.once.Do(virgoquerylexerLexerInit)
}

// NewVirgoQueryLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewVirgoQueryLexer(input antlr.CharStream) *VirgoQueryLexer {
	VirgoQueryLexerInit()
	l := new(VirgoQueryLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &VirgoQueryLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "VirgoQueryLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// VirgoQueryLexer tokens.
const (
	VirgoQueryLexerLPAREN          = 1
	VirgoQueryLexerRPAREN          = 2
	VirgoQueryLexerBOOLEAN         = 3
	VirgoQueryLexerCOLON           = 4
	VirgoQueryLexerTITLE           = 5
	VirgoQueryLexerJOURNAL_TITLE   = 6
	VirgoQueryLexerAUTHOR          = 7
	VirgoQueryLexerSUBJECT         = 8
	VirgoQueryLexerKEYWORD         = 9
	VirgoQueryLexerFULLTEXT        = 10
	VirgoQueryLexerSERIES          = 11
	VirgoQueryLexerPUBLISHED       = 12
	VirgoQueryLexerIDENTIFIER      = 13
	VirgoQueryLexerFILTER          = 14
	VirgoQueryLexerDATE            = 15
	VirgoQueryLexerLBRACE          = 16
	VirgoQueryLexerWS1             = 17
	VirgoQueryLexerERROR_CHARACTER = 18
	VirgoQueryLexerQUOTE           = 19
	VirgoQueryLexerLBRACKET        = 20
	VirgoQueryLexerRBRACKET        = 21
	VirgoQueryLexerRBRACE          = 22
	VirgoQueryLexerSEARCH_WORD     = 23
	VirgoQueryLexerWS2             = 24
	VirgoQueryLexerTO              = 25
	VirgoQueryLexerAFTER           = 26
	VirgoQueryLexerBEFORE          = 27
	VirgoQueryLexerDATE_STRING     = 28
	VirgoQueryLexerWS3             = 29
	VirgoQueryLexerQUOTE_STR       = 30
)

// VirgoQueryLexer modes.
const (
	VirgoQueryLexerSEARCH = iota + 1
	VirgoQueryLexerDATE_MODE
	VirgoQueryLexerIN_QUOTE
)
